{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/list/list.component.ts","webpack:///src/app/list/list.component.html","webpack:///src/app/list/starships.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","ListComponent","json","ships","shipAttribute","error","requestStarships","orderCriteria","getJson","subscribe","next","starships","undefined","data","allStarships","length","setShipAttribute","maxValue","maxAttributeValueByShipAttribute","map","ship","attribute","getAttributeValue","name","percentage","getPercentageProgressValue","attributeValue","console","Math","max","apply","log10","StarshipsService","http","url","post","headers","providedIn","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Starships';\n  constructor() { }\n}\n","<div>\n  <div class=\"header-image\" >\n    <h1 class=\"main-title\">{{title}}</h1>\n    <app-list></app-list>\n  </div>\n</div>\n<router-outlet></router-outlet>\n\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport {ListComponent} from './list/list.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ListComponent\n\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {StarshipsService, SearchResponse, Starship} from './starships.service';\n\n\n/**\n * Show the list with the starships with their values and percentage in a barchart\n */\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.css']\n})\nexport class ListComponent implements OnInit{\n  constructor(public json: StarshipsService) { }\n  ships: Array<StarshipData> = [];\n  shipAttribute = '';\n  error = false;\n\n  /**\n   * Launch default search\n   */\n  ngOnInit() {\n    this.requestStarships('hyperdriveRating_DESC');\n  }\n\n  /**\n   * Get data from the API\n   * Check the array contains data, if it doesn't show an error message\n   * Fill staships list with attributes selected by the button\n   * @param orderCriteria : attribute to order\n   */\n  requestStarships(orderCriteria: string) {\n    this.json.getJson('https://swapi-graphql.netlify.app/.netlify/functions/index', orderCriteria).subscribe({\n      next: (starships: SearchResponse ) => {\n        if (starships === undefined || starships === null || starships.data === undefined ||\n                   starships.data === null || starships.data.allStarships.starships.length === 0)  {\n          this.error = true;\n        } else {\n          const allStarships: Array<Starship> = starships.data.allStarships.starships;\n          this.setShipAttribute(orderCriteria);\n\n          const maxValue = this.maxAttributeValueByShipAttribute(this.shipAttribute, allStarships);\n          this.ships = allStarships.map((ship: Starship) => {\n            const attribute = this.getAttributeValue(ship);\n            return {\n              name: ship.name,\n              percentage: this.getPercentageProgressValue(maxValue, attribute),\n              attributeValue: attribute\n            } as StarshipData;\n          });\n        }\n      },\n      error: error => {\n        console.error('There was an error!', error);\n        this.error = true;\n      }\n    });\n  }\n\n  /**\n   * Set ship attribute based on the given order criteria at the button checked\n   * @param orderCriteria : attribute to order\n   */\n  setShipAttribute(orderCriteria: string) {\n    switch (orderCriteria) {\n      case 'cargoCapacity_DESC':\n        this.shipAttribute = 'cargoCapacity';\n        break;\n      case 'costInCredits_DESC':\n        this.shipAttribute = 'costInCredits';\n        break;\n      case 'crew_DESC':\n        this.shipAttribute = 'crew';\n        break;\n      case 'hyperdriveRating_DESC':\n        this.shipAttribute = 'hyperdriveRating';\n        break;\n      case 'length_DESC':\n        this.shipAttribute = 'length';\n        break;\n      case 'maxAtmospheringSpeed_DESC':\n        this.shipAttribute = 'maxAtmospheringSpeed';\n        break;\n      default:\n        this.shipAttribute = 'passengers';\n    }\n  }\n\n  /**\n   * Get max value number from the array\n   * @param shipAttribute : attribute name\n   * @param ships : starships array\n   * @return get the max attribute value\n   */\n  maxAttributeValueByShipAttribute(shipAttribute: string, ships: Array<Starship>): number {\n    return Math.max.apply(Math, ships.map( (ship: Starship) => {\n      return ship[shipAttribute];\n    }));\n  }\n\n  /**\n   * Get attribute value or return 0 in case of attributes with default or null value\n   * @param ship : starship data\n   * @return the value of the property in the given ship\n   */\n  private getAttributeValue(ship: Starship): number {\n    if (ship[this.shipAttribute] === null || ship[this.shipAttribute] === undefined) {\n      return 0;\n    } else {\n      return ship[this.shipAttribute];\n    }\n  }\n\n  /**\n   * Get percentage value from the attribute to show in the progress barchart\n   * @param maxValue : max value from the array\n   * @param attributeValue : number of the attribute value\n   * @return the percentage calculated\n   */\n  getPercentageProgressValue(maxValue: number, attributeValue: number): number {\n    if (attributeValue === 0 || maxValue === null || maxValue === undefined || maxValue === 0) {\n      return 0;\n    }\n    return (Math.log10(attributeValue) / Math.log10(maxValue)) * 100;\n  }\n}\n\n/**\n * Assign data type of typescript to object values\n */\nexport interface StarshipData {\n  name: string;\n  percentage: number;\n  attributeValue: number;\n}\n\n\n","<div class=\"content\" *ngIf=\"error === false\">\n    <div class=\"center-content\">\n      <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n        <label class=\"btn btn-secondary active\">\n          <input type=\"radio\" name=\"options\" id=\"option1\" (click)=\"requestStarships('cargoCapacity_DESC')\"> Cargo capacity\n        </label>\n        <label class=\"btn btn-secondary\">\n          <input type=\"radio\" name=\"options\" id=\"option2\" (click)=\"requestStarships('costInCredits_DESC')\"> Cost in credits\n        </label>\n        <label class=\"btn btn-secondary\">\n          <input type=\"radio\" name=\"options\" id=\"option3\" (click)=\"requestStarships('crew_DESC')\"> Crew\n        </label>\n        <label class=\"btn btn-secondary\">\n          <input type=\"radio\" name=\"options\" id=\"option4\" (click)=\"requestStarships('hyperdriveRating_DESC')\" checked> Hyperdrive rating\n        </label>\n        <label class=\"btn btn-secondary\">\n          <input type=\"radio\" name=\"options\" id=\"option5\" (click)=\"requestStarships('length_DESC')\"> Length\n        </label>\n        <label class=\"btn btn-secondary\">\n          <input type=\"radio\" name=\"options\" id=\"option6\" (click)=\"requestStarships('maxAtmospheringSpeed_DESC')\"> Max atmosphering speed\n        </label>\n        <label class=\"btn btn-secondary\">\n          <input type=\"radio\" name=\"options\" id=\"option7\" (click)=\"requestStarships('passengers_DESC')\"> Passengers\n        </label>\n      </div>\n    </div>\n\n  <div class=\"container progress-background\" *ngFor=\"let data of ships\">\n    <span class=\"progress-name\">{{data.name}}</span>\n    <div class=\"progress\" style=\"\">\n      <div class=\"progress-bar\" role=\"progressbar\" style=\"width: {{data.percentage}}%\" aria-valuenow=\"90\" aria-valuemin=\"0\" aria-valuemax=\"7400\"></div>\n      <span class=\"right attribute-value\">{{data.attributeValue}}</span>\n    </div>\n  </div>\n  <router-outlet></router-outlet>\n</div>\n<div class=\"error-content\" *ngIf=\"error\">\n  <p class=\"error-message\">I'm sorry. There was an error</p>\n  <div class=\"error-image\"></div>\n</div>\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n/**\n * Service to get data from the API\n */\nexport class StarshipsService {\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Search starships making a Post to the API\n   */\n  getJson(url: string, orderCriteria: string) {\n    return this.http.post<SearchResponse>(url, '{ \"query\": \"query { allStarships { starships{ cargoCapacity costInCredits id name crew hyperdriveRating length maxAtmospheringSpeed passengers} }  }\" }', {\n      headers: {\n        'Content-Type' : 'application/json',\n        'Access-Control-Allow-Origin': '*',\n      }\n    });\n  }\n}\n\n/**\n * Define data types to Starship object\n */\nexport interface Starship {\n  id: string;\n  name: string;\n  crew: number;\n  cargoCapacity: number;\n  costInCredits: number;\n  hyperdriveRating: number;\n  length: number;\n  maxAtmospheringSpeed: number;\n  passengers: number;\n}\n\n/**\n *  Define array type to allStarships\n */\nexport interface StarshipsList {\n  allStarships: Starships;\n}\n\n/**\n * Object that contains starships list\n */\nexport interface Starships {\n  starships: Array<Starship>\n}\n\n/**\n * Assign starshipsList to data\n */\nexport interface SearchResponse {\n  data: StarshipsList;\n}\n\n\n\n\n\n\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}